---
title: PIT 0.25 released
keywords: documentation
tags: release
description: PIT 0.25 released
layout: post
---

PIT 0.25 has now been released and is available from google code and maven central.

<!-- more -->

The headline feature is support for TestNG, but there's lots of other good stuff included.

If you're about to upgrade (and you should due to the fix for issue 17) please read all of the below as there are some breaking changes that might affect a small percentage of users.

## TestNG support

PIT will now automatically detect both TestNG and JUnit tests. The performance for TestNG may be a little sluggish compared to JUnit
as PIT is EE Coarse with respect to TestNG, but EE Fine with respect to JUnit (see [mutation testing systems compared](/java_mutation_testing_systems/) if you have no idea what this is supposed to mean).

## Fix for broken mutation isolation for nested classes

See [issue 17](http://code.google.com/p/pitestrunner/issues/detail?id=17)

This is an important defect fix as it could cause incorrect results.

## Fix for broken classpath isolation for XStream

One of PIT's key dependencies was not correctly isolated in 0.24 and below.

## Improved handling for Parameterized JUnit tests

These were previously being treated as EE Coarse. Again see [mutation testing systems compared](/java_mutation_testing_systems/) for details of what this means.

## Ability to limit mutations to specific classpath roots 

A new parameter **mutableCodePaths** has been added to the commandline tool to allow mutations to be limited to code from certain locations on the class path only.

For maven users this is not parameterised. The data in the pom.xml is used to limit mutations to non test code only.

The **includeJarFiles** option that existed in 0.24 and below has been removed as the new functionality effectively replaces it.

## Ability to add non launch classpaths

A new parameter (**classPath**) has been added to the commandline tool to allow additional classpaths to be specified.

## Option to not throw an error when no mutations are found

The **failWhenNoMutations** option makes it possible to suppress the error generated when no mutations are found. This is particularly useful for
maven multi-module projects.

See [jumi](https://github.com/orfjackal/jumi) for an example of a multi module codebase using this new feature.

## Changes to html report

Some minor changes have been made to the html report.

The report files are now named after the java filename rather than the slightly strange mix of outer and inner class names used before. These
will now also be listed in a consistent order on the index page.

## Console statistics

Statistics are now written to the console at the end of each PIT run. These may be of general interest, but will be of particular
use during the development of performance improvements in the future.

## Reworked classpath scanning

For various reasons PIT has switched from inspecting the classpath using reflection to inspecting using bytecode inspection.

